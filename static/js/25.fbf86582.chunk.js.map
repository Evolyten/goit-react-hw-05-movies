{"version":3,"file":"static/js/25.fbf86582.chunk.js","mappings":"iQAEe,SAASA,EAAT,GAA2C,IAAhBC,EAAe,EAAfA,YAChCC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QACpB,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF,EAKZ,CCND,IA0BA,EA1BgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,qGACOC,EAAAA,EAAAA,IAAmCP,GAD1C,OACNQ,EADM,OAEZJ,EAAWI,GAFC,2CAAH,qDAIXF,GACD,GAAE,CAACN,KAGF,wBACsB,IAAnBG,EAAQM,OACPN,EAAQO,KAAI,SAAAC,GAAM,OAChB,SAAChB,EAAD,CAAiCC,YAAae,GAAxBA,EAAOd,GADb,KAIlB,uCAIP,C,2MCzBKe,EAAW,+BACXC,EAAU,2CAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEsBC,EAAAA,EAAAA,IAAA,UACpBH,EADoB,gCACYC,IAHlC,cAEGG,EAFH,OAKGC,EAAgBC,EAAwBF,EAAWR,KAAKW,SAL3D,kBAMIF,GANJ,gCAQHG,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UATlB,gFAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8CC,GAA9C,kGAEwBV,EAAAA,EAAAA,IAAA,UACtBH,EADsB,yBACGC,EADH,iCACmCY,EADnC,gCAFxB,cAEGC,EAFH,OAKGT,EAAgBC,EAAwBQ,EAAalB,KAAKW,SAL7D,kBAMIF,GANJ,gCAQHG,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UATlB,gFAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA2C9B,GAA3C,kGAEqBkB,EAAAA,EAAAA,IAAA,UACnBH,EADmB,kBACDf,EADC,YACKgB,EADL,oBAFrB,cAEGe,EAFH,OAKGX,EAAgBY,EAAuBD,EAAUpB,MALpD,kBAMIS,GANJ,gCAQHG,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UATlB,gFAaA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+CjC,GAA/C,kGAEoBkB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAf,EADA,oBACcgB,EADd,oBAFpB,cAEGkB,EAFH,OAKGd,EAAgBe,EAAuBD,EAASvB,KAAKyB,MALxD,kBAMIhB,GANJ,gCAQHG,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UATlB,gFAaA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAAkDV,GAAlD,kGAEwBkB,EAAAA,EAAAA,IAAA,UACtBH,EADsB,kBACJf,EADI,4EAFxB,cAEGqC,EAFH,OAMGjB,EAAgBkB,EAAyBD,EAAa1B,KAAKW,SAN9D,kBAOIF,GAPJ,gCASHG,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UAVlB,gFAcP,SAASL,EAAwBkB,GAO/B,OANsBA,EAAM1B,KAAI,SAAA2B,GAC9B,MAAO,CACLxC,GAAIwC,EAAUxC,GACdyC,MAAOD,EAAUC,MAEpB,GAEF,CAED,SAAST,EAAuBU,GAS9B,MARsB,CACpBD,MAAOC,EAAOD,MACdE,SAAUD,EAAOC,SACjBC,aAAcF,EAAOE,aACrBC,OAAQH,EAAOG,OACfC,aAAcJ,EAAOI,aACrBC,YAAaL,EAAOK,YAGvB,CAED,SAASZ,EAAuBI,GAS9B,OARsBA,EAAM1B,KAAI,SAAAmC,GAC9B,MAAO,CACLC,QAASD,EAASC,QAClBC,KAAMF,EAASE,KACfC,aAAcH,EAASG,aACvBC,UAAWJ,EAASI,UAEvB,GAEF,CAED,SAASd,EAAyBC,GAQhC,OAPsBA,EAAM1B,KAAI,SAAAwC,GAC9B,MAAO,CACLrD,GAAIqD,EAAWrD,GACfC,OAAQoD,EAAWpD,OACnBC,QAASmD,EAAWnD,QAEvB,GAEF,C","sources":["components/ReviewsListItem/ReviewsListItem.jsx","components/Reviews/Reviews.jsx","components/services/fetchApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function ReviewsListItem({ reviewsInfo }) {\n  const { id, author, content } = reviewsInfo;\n  return (\n    <li key={id}>\n      <h3>Author:{author}</h3>\n      <p>{content}</p>\n    </li>\n  );\n}\n\nReviewsListItem.propTypes = {\n  reviewsInfo: PropTypes.object,\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieReviewsByIdAndAddToState } from 'components/services/fetchApi';\nimport ReviewsListItem from 'components/ReviewsListItem/ReviewsListItem';\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchMovieReviewsByIdAndAddToState(movieId);\n      setReviews(data);\n    };\n    fetch();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.length !== 0 ? (\n        reviews.map(review => (\n          <ReviewsListItem key={review.id} reviewsInfo={review} />\n        ))\n      ) : (\n        <p>No reviews</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=71b9c1ee751ada432ef4ae5fbbdff5cd';\n\nexport async function fetchTrendsFilmAndAddToState() {\n  try {\n    const trendsFilm = await axios.get(\n      `${BASE_URL}/trending/movie/week?${API_KEY}`\n    );\n    const normalizeData = dataNormalizeMoviesList(trendsFilm.data.results);\n    return normalizeData;\n  } catch (error) {\n    console.log(error);\n    toast.error(`${error.message}`);\n  }\n}\n\nexport async function fetchMoviesByNameAndAddToState(filter) {\n  try {\n    const moviesByName = await axios.get(\n      `${BASE_URL}/search/movie?${API_KEY}&language=en-US&query=${filter}&page=1&include_adult=false`\n    );\n    const normalizeData = dataNormalizeMoviesList(moviesByName.data.results);\n    return normalizeData;\n  } catch (error) {\n    console.log(error);\n    toast.error(`${error.message}`);\n  }\n}\n\nexport async function fetchMovieByIdAndAddToState(id) {\n  try {\n    const movieById = await axios.get(\n      `${BASE_URL}/movie/${id}?${API_KEY}&language=en-US`\n    );\n    const normalizeData = dataNormalizeMovieById(movieById.data);\n    return normalizeData;\n  } catch (error) {\n    console.log(error);\n    toast.error(`${error.message}`);\n  }\n}\n\nexport async function fetchMovieCastByIdAndAddToState(id) {\n  try {\n    const castById = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?${API_KEY}&language=en-US`\n    );\n    const normalizeData = dataNormalizeMovieCast(castById.data.cast);\n    return normalizeData;\n  } catch (error) {\n    console.log(error);\n    toast.error(`${error.message}`);\n  }\n}\n\nexport async function fetchMovieReviewsByIdAndAddToState(id) {\n  try {\n    const movieReviews = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=71b9c1ee751ada432ef4ae5fbbdff5cd&language=en-US&page=1`\n    );\n\n    const normalizeData = dataNormalizeReviewsById(movieReviews.data.results);\n    return normalizeData;\n  } catch (error) {\n    console.log(error);\n    toast.error(`${error.message}`);\n  }\n}\n\nfunction dataNormalizeMoviesList(array) {\n  const normalizeData = array.map(movieInfo => {\n    return {\n      id: movieInfo.id,\n      title: movieInfo.title,\n    };\n  });\n  return normalizeData;\n}\n\nfunction dataNormalizeMovieById(object) {\n  const normalizeData = {\n    title: object.title,\n    overview: object.overview,\n    vote_average: object.vote_average,\n    genres: object.genres,\n    release_date: object.release_date,\n    poster_path: object.poster_path,\n  };\n  return normalizeData;\n}\n\nfunction dataNormalizeMovieCast(array) {\n  const normalizeData = array.map(castInfo => {\n    return {\n      cast_id: castInfo.cast_id,\n      name: castInfo.name,\n      profile_path: castInfo.profile_path,\n      character: castInfo.character,\n    };\n  });\n  return normalizeData;\n}\n\nfunction dataNormalizeReviewsById(array) {\n  const normalizeData = array.map(reviewInfo => {\n    return {\n      id: reviewInfo.id,\n      author: reviewInfo.author,\n      content: reviewInfo.content,\n    };\n  });\n  return normalizeData;\n}\n"],"names":["ReviewsListItem","reviewsInfo","id","author","content","movieId","useParams","useState","reviews","setReviews","useEffect","fetch","fetchMovieReviewsByIdAndAddToState","data","length","map","review","BASE_URL","API_KEY","fetchTrendsFilmAndAddToState","axios","trendsFilm","normalizeData","dataNormalizeMoviesList","results","console","log","toast","message","fetchMoviesByNameAndAddToState","filter","moviesByName","fetchMovieByIdAndAddToState","movieById","dataNormalizeMovieById","fetchMovieCastByIdAndAddToState","castById","dataNormalizeMovieCast","cast","movieReviews","dataNormalizeReviewsById","array","movieInfo","title","object","overview","vote_average","genres","release_date","poster_path","castInfo","cast_id","name","profile_path","character","reviewInfo"],"sourceRoot":""}